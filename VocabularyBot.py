import logging
import os
import random

from dotenv import load_dotenv

import BaseModel
from DatabaseManeger import DatabaseManager

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
try:
    import psycopg2
    from sqlalchemy import create_engine, Column, Integer, String, Boolean, ForeignKey, text, Index
    from sqlalchemy.orm import sessionmaker, declarative_base, relationship, close_all_sessions
    from sqlalchemy.exc import SQLAlchemyError
except ImportError as e:
    print("–û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
    print("pip install psycopg2-binary sqlalchemy python-dotenv python-telegram-bot")
    raise

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, \
    KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê ====================
class VocabularyBot:
    def __init__(self):
        self.db = DatabaseManager()
        self.db.initialize_words()

        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not token:
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

        self.application = Application.builder().token(token).build()
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        handlers = [
            CommandHandler("start", self.start),
            CommandHandler("add", self.add_word),
            CommandHandler("remove", self.remove_word),
            CommandHandler("quiz", self.quiz),
            CommandHandler("list", self.list_words),
            CommandHandler("stats", self.show_stats),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message),
            CallbackQueryHandler(self.handle_button_click)
        ]
        for handler in handlers:
            self.application.add_handler(handler)

    # ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n\n"
                "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n"
                "/remove - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n"
                "/quiz - –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n"
                "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞\n"
                "/stats - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
                reply_markup=self._get_main_menu()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")

    def _get_main_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        return ReplyKeyboardMarkup([
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")],
            [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"), KeyboardButton("‚ùå –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")]
        ], resize_keyboard=True)

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        with self.db.get_session() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                total_words = session.query(BaseModel.UserWord).filter_by(user_id=user_id).count()

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
                learned_words = session.query(BaseModel.UserWord).filter_by(
                    user_id=user_id,
                    passed_word=True
                ).count()

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                # (–∑–¥–µ—Å—å –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å –¥–∞—Ç–∞–º–∏)

                await update.message.reply_text(
                    f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤: {total_words}\n"
                    f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ: {learned_words}\n"
                    f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {round(learned_words / max(total_words, 1) * 100)}%\n\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
                    reply_markup=self._get_main_menu()
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self._get_main_menu()
                )

    # ==================== –†–ê–ë–û–¢–ê –°–û –°–õ–û–í–ê–ú–ò ====================
    async def add_word(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        if not context.args:
            await update.message.reply_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
                "–ü—Ä–∏–º–µ—Ä: <code>—è–±–ª–æ–∫–æ apple</code>",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]],
                    resize_keyboard=True
                )
            )
            return

        try:
            if len(context.args) < 2:
                await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –æ–±–∞ —Å–ª–æ–≤–∞: –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!")
                return

            ru_word, en_word = context.args[0].lower(), context.args[1].lower()
            user_id = update.effective_user.id

            with self.db.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞
                word = session.query(BaseModel.Word).filter_by(
                    target_word=ru_word,
                    translate_word=en_word
                ).first()

                if not word:
                    word = BaseModel.Word(target_word=ru_word, translate_word=en_word)
                    session.add(word)
                    session.commit()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                user_word = session.query(BaseModel.UserWord).filter_by(
                    user_id=user_id,
                    word_id=word.id
                ).first()

                if not user_word:
                    user_word = BaseModel.UserWord(
                        user_id=user_id,
                        word_id=word.id,
                        passed_word=False
                    )
                    session.add(user_word)
                    session.commit()

                await update.message.reply_text(
                    f"‚úÖ –°–ª–æ–≤–æ <b>{ru_word}</b> - <b>{en_word}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                    parse_mode="HTML",
                    reply_markup=self._get_main_menu()
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self._get_main_menu()
            )

    async def remove_word(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not context.args:
            await update.message.reply_text(
                "üóë –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]],
                    resize_keyboard=True
                )
            )
            return

        try:
            word_to_remove = context.args[0].lower()
            user_id = update.effective_user.id

            with self.db.get_session() as session:
                word = session.query(BaseModel.Word).filter_by(target_word=word_to_remove).first()

                if not word:
                    await update.message.reply_text("‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                    return

                # –£–¥–∞–ª—è–µ–º –∏–∑ user_words
                session.query(BaseModel.UserWord).filter_by(
                    user_id=user_id,
                    word_id=word.id
                ).delete()

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ
                if not session.query(BaseModel.IgnoreWord).filter_by(
                        user_id=user_id,
                        word_id=word.id
                ).first():
                    ignore_word = BaseModel.IgnoreWord(user_id=user_id, word_id=word.id)
                    session.add(ignore_word)

                session.commit()

                await update.message.reply_text(
                    f"üóë –°–ª–æ–≤–æ <b>{word_to_remove}</b> —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è!",
                    parse_mode="HTML",
                    reply_markup=self._get_main_menu()
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞",
                reply_markup=self._get_main_menu()
            )

    async def list_words(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        user_id = update.effective_user.id
        page = int(context.args[0]) if context.args and context.args[0].isdigit() else 1
        page_size = 10

        with self.db.get_session() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                total_words = session.query(BaseModel.UserWord).filter_by(user_id=user_id).count()
                if not total_words:
                    await update.message.reply_text(
                        "üì≠ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add",
                        reply_markup=self._get_main_menu()
                    )
                    return

                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                total_pages = (total_words + page_size - 1) // page_size
                page = max(1, min(page, total_pages))

                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                words = session.query(BaseModel.Word).join(BaseModel.UserWord).filter(
                    BaseModel.UserWord.user_id == user_id
                ).order_by(BaseModel.Word.target_word).offset((page - 1) * page_size).limit(page_size).all()

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                word_list = "\n".join(
                    f"‚Ä¢ {word.target_word} - {word.translate_word}" +
                    (" ‚úÖ" if session.query(BaseModel.UserWord).filter_by(
                        user_id=user_id,
                        word_id=word.id,
                        passed_word=True
                    ).first() else "")
                    for word in words
                )

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                pagination = []
                if page > 1:
                    pagination.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
                if page < total_pages:
                    pagination.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page + 1}"))

                reply_markup = InlineKeyboardMarkup([pagination]) if pagination else None

                await update.message.reply_text(
                    f"üìñ –í–∞—à–∏ —Å–ª–æ–≤–∞ (—Å—Ç—Ä. {page}/{total_pages}):\n\n{word_list}",
                    reply_markup=reply_markup
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤",
                    reply_markup=self._get_main_menu()
                )

    # ==================== –í–ò–ö–¢–û–†–ò–ù–ê ====================
    async def quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = update.message or (update.callback_query.message if update.callback_query else None)
            if not message:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                return

            user_id = update.effective_user.id
            with self.db.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_words = session.query(BaseModel.Word).join(BaseModel.UserWord).filter(
                    BaseModel.UserWord.user_id == user_id,
                    BaseModel.UserWord.passed_word == False
                ).all()

                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                added_words_ids = [w.id for w in user_words]
                all_words = session.query(BaseModel.Word).filter(
                    ~BaseModel.Word.id.in_(added_words_ids) if added_words_ids else True
                ).order_by(text("RANDOM()")).limit(5).all()

                words = user_words + all_words
                if not words:
                    await message.reply_text(
                        "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add",
                        reply_markup=self._get_main_menu()
                    )
                    return

                word = random.choice(words)
                correct_answer = word.translate_word

                # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                wrong_answers = session.execute(
                    text("""
                    SELECT translate_word 
                    FROM words 
                    WHERE translate_word != :correct 
                    GROUP BY translate_word
                    ORDER BY RANDOM() 
                    LIMIT 3
                    """).bindparams(correct=correct_answer)
                ).fetchall()

                options = [t[0] for t in wrong_answers] + [correct_answer]
                random.shuffle(options)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                context.user_data['quiz'] = {
                    'correct_answer': correct_answer,
                    'word_id': word.id,
                    'is_user_word': word in user_words
                }

                keyboard = [
                    [InlineKeyboardButton(opt, callback_data=f"quiz_{opt}")]
                    for opt in options
                ]

                await message.reply_text(
                    f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ '{word.target_word}'?",
                    reply_markup=InlineKeyboardMarkup(keyboard))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
            if update.message:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã",
                    reply_markup=self._get_main_menu()
                )

    async def handle_button_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None"""
        try:
            query = update.callback_query
            if not query or not query.message:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å callback_query –∏–ª–∏ message")
                return

            await query.answer()

            message = query.message
            if not message:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                return

            if query.data.startswith("quiz_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                user_answer = query.data[5:]
                quiz_data = context.user_data.get('quiz', {})
                correct_answer = quiz_data.get('correct_answer')

                if user_answer == correct_answer:
                    response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {correct_answer} - –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!"
                else:
                    response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

                await query.edit_message_text(response)

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_quiz")]]
                await message.reply_text(
                    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?",
                    reply_markup=InlineKeyboardMarkup(keyboard))

            elif query.data == "continue_quiz":
                await self.quiz(update, context)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
            if update.callback_query and update.callback_query.message:
                await update.callback_query.message.reply_text(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                    reply_markup=self._get_main_menu()
                )
    # ==================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text

        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>—è–±–ª–æ–∫–æ apple</code>)",
                parse_mode="HTML"
            )
        elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        elif text == "üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤":
            await self.list_words(update, context)
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.show_stats(update, context)
        elif text == "üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞":
            await self.quiz(update, context)
        elif text == "‚ùå –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É":
            await update.message.reply_text(
                "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –µ—ë –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
        elif text == "–û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "‚úñÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=self._get_main_menu()
            )
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
            if len(text.split()) >= 2:
                context.args = text.split()
                await self.add_word(update, context)
            else:
                await update.message.reply_text(
                    "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.",
                    reply_markup=self._get_main_menu()
                )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            self.application.run_polling()
        except Exception as e:
            logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            close_all_sessions()
            self.db.engine.dispose()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# ==================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================
if __name__ == "__main__":
    try:
        bot = VocabularyBot()
        bot.run()
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")